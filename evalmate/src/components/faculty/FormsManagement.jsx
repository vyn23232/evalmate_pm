import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Card from '../common/Card';
import Button from '../common/Button';
import formStore from '../../utils/FormStore';
import './FormsManagement.css';

function FormsManagement() {
  const [forms, setForms] = useState([]);
  const [filter, setFilter] = useState('all'); // all, published, draft
  const [isLoading, setIsLoading] = useState(true);
  const [editingForm, setEditingForm] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    loadForms();

    // Subscribe to form updates
    const unsubscribe = formStore.subscribe ? formStore.subscribe(loadForms) : () => {};
    
    return () => {
      unsubscribe();
    };
  }, []);

  const loadForms = () => {
    setIsLoading(true);
    try {
      const allForms = formStore.getAllForms();
      setForms(allForms);
    } catch (error) {
      console.error('Error loading forms:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const filteredForms = forms.filter(form => {
    if (filter === 'all') return true;
    return form.status === filter;
  });

  const handlePublishForm = (formId) => {
    try {
      formStore.publishForm(formId);
      loadForms();
      alert('Form published successfully! Students can now see it in their dashboard.');
    } catch (error) {
      console.error('Error publishing form:', error);
      alert('Failed to publish form. Please try again.');
    }
  };

  const handleUnpublishForm = (formId) => {
    try {
      formStore.updateForm(formId, { status: 'draft' });
      loadForms();
      alert('Form unpublished successfully. Students will no longer see it.');
    } catch (error) {
      console.error('Error unpublishing form:', error);
      alert('Failed to unpublish form. Please try again.');
    }
  };

  const handleDeleteForm = (formId) => {
    try {
      formStore.deleteForm(formId);
      loadForms();
      setShowDeleteConfirm(null);
      alert('Form deleted successfully.');
    } catch (error) {
      console.error('Error deleting form:', error);
      alert('Failed to delete form. Please try again.');
    }
  };

  const handleDuplicateForm = (form) => {
    try {
      const duplicatedForm = {
        ...form,
        title: `${form.title} (Copy)`,
        status: 'draft',
        dueDate: '', // Reset due date
        createdAt: undefined, // Will be set by addForm
        updatedAt: undefined,
        id: undefined // Will be generated by addForm
      };
      
      const newForm = formStore.addForm(duplicatedForm);
      loadForms();
      alert(`Form duplicated successfully! New form ID: ${newForm.id}`);
    } catch (error) {
      console.error('Error duplicating form:', error);
      alert('Failed to duplicate form. Please try again.');
    }
  };

  const handleEditForm = (formId) => {
    // Navigate to form builder with form ID for editing
    navigate(`/faculty/forms?edit=${formId}`);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Not set';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusBadge = (status) => {
    const badges = {
      published: { text: 'Published', class: 'published' },
      draft: { text: 'Draft', class: 'draft' }
    };
    
    const badge = badges[status] || { text: status, class: 'default' };
    
    return (
      <span className={`forms-management__status-badge forms-management__status-badge--${badge.class}`}>
        {badge.text}
      </span>
    );
  };

  const getTotalQuestions = (form) => {
    if (!form.sections) return 0;
    return form.sections.reduce((total, section) => {
      if (typeof section === 'string') return total + 1;
      return total + (section.questions ? section.questions.length : 1);
    }, 0);
  };

  const getFormStats = () => {
    const published = forms.filter(f => f.status === 'published').length;
    const drafts = forms.filter(f => f.status === 'draft').length;
    
    return { total: forms.length, published, drafts };
  };

  const stats = getFormStats();

  return (
    <div className="forms-management">
      <div className="forms-management__header">
        <div className="forms-management__title-section">
          <h2 className="forms-management__title">Forms Management</h2>
          <p className="forms-management__subtitle">
            Manage all your evaluation forms with full CRUD functionality
          </p>
        </div>
        
        <div className="forms-management__actions">
          <Link to="/faculty/forms">
            <Button variant="primary">
              ✨ Create New Form
            </Button>
          </Link>
        </div>
      </div>

      {/* Stats Summary */}
      <div className="forms-management__stats">
        <div className="forms-management__stat">
          <span className="forms-management__stat-number">{stats.total}</span>
          <span className="forms-management__stat-label">Total Forms</span>
        </div>
        <div className="forms-management__stat">
          <span className="forms-management__stat-number">{stats.published}</span>
          <span className="forms-management__stat-label">Published</span>
        </div>
        <div className="forms-management__stat">
          <span className="forms-management__stat-number">{stats.drafts}</span>
          <span className="forms-management__stat-label">Drafts</span>
        </div>
      </div>

      {/* Filter Tabs */}
      <div className="forms-management__filters">
        <button
          className={`forms-management__filter ${filter === 'all' ? 'active' : ''}`}
          onClick={() => setFilter('all')}
        >
          All Forms ({forms.length})
        </button>
        <button
          className={`forms-management__filter ${filter === 'published' ? 'active' : ''}`}
          onClick={() => setFilter('published')}
        >
          Published ({stats.published})
        </button>
        <button
          className={`forms-management__filter ${filter === 'draft' ? 'active' : ''}`}
          onClick={() => setFilter('draft')}
        >
          Drafts ({stats.drafts})
        </button>
      </div>

      {/* Forms List */}
      <div className="forms-management__content">
        {isLoading ? (
          <div className="forms-management__loading">
            <div className="forms-management__loading-spinner"></div>
            <p>Loading forms...</p>
          </div>
        ) : filteredForms.length === 0 ? (
          <Card className="forms-management__empty">
            <div className="forms-management__empty-content">
              <div className="forms-management__empty-icon">📝</div>
              <h3>
                {filter === 'all' 
                  ? 'No Forms Created Yet' 
                  : `No ${filter === 'published' ? 'Published Forms' : 'Draft Forms'}`
                }
              </h3>
              <p>
                {filter === 'all' 
                  ? 'Create your first evaluation form to get started.'
                  : `You don't have any ${filter} forms yet.`
                }
              </p>
              {filter === 'all' && (
                <Link to="/faculty/forms">
                  <Button variant="primary" className="mt-4">
                    Create New Form
                  </Button>
                </Link>
              )}
            </div>
          </Card>
        ) : (
          <div className="forms-management__grid">
            {filteredForms.map(form => (
              <Card key={form.id} className="forms-management__form-card">
                <div className="forms-management__form-header">
                  <div className="forms-management__form-title-section">
                    <h3 className="forms-management__form-title">{form.title}</h3>
                    {getStatusBadge(form.status)}
                  </div>
                  
                  <div className="forms-management__form-actions">
                    <button 
                      className="forms-management__action-btn forms-management__action-btn--edit"
                      onClick={() => handleEditForm(form.id)}
                      title="Edit Form"
                    >
                      ✏️
                    </button>
                    
                    <button 
                      className="forms-management__action-btn forms-management__action-btn--duplicate"
                      onClick={() => handleDuplicateForm(form)}
                      title="Duplicate Form"
                    >
                      📋
                    </button>
                    
                    <button 
                      className="forms-management__action-btn forms-management__action-btn--delete"
                      onClick={() => setShowDeleteConfirm(form.id)}
                      title="Delete Form"
                    >
                      🗑️
                    </button>
                  </div>
                </div>

                <div className="forms-management__form-content">
                  <p className="forms-management__form-description">
                    {form.description || 'No description provided'}
                  </p>
                  
                  <div className="forms-management__form-details">
                    <div className="forms-management__form-detail">
                      <span className="forms-management__detail-label">Course:</span>
                      <span className="forms-management__detail-value">
                        {form.course || 'Not specified'}
                      </span>
                    </div>
                    
                    <div className="forms-management__form-detail">
                      <span className="forms-management__detail-label">Due Date:</span>
                      <span className="forms-management__detail-value">
                        {formatDate(form.dueDate)}
                      </span>
                    </div>
                    
                    <div className="forms-management__form-detail">
                      <span className="forms-management__detail-label">Questions:</span>
                      <span className="forms-management__detail-value">
                        {getTotalQuestions(form)} questions in {form.sections?.length || 0} sections
                      </span>
                    </div>
                    
                    <div className="forms-management__form-detail">
                      <span className="forms-management__detail-label">Created:</span>
                      <span className="forms-management__detail-value">
                        {formatDate(form.createdAt)}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="forms-management__form-footer">
                  {form.status === 'draft' ? (
                    <Button 
                      variant="primary" 
                      size="small"
                      onClick={() => handlePublishForm(form.id)}
                    >
                      📢 Publish Form
                    </Button>
                  ) : (
                    <Button 
                      variant="secondary" 
                      size="small"
                      onClick={() => handleUnpublishForm(form.id)}
                    >
                      📝 Unpublish
                    </Button>
                  )}
                  
                  <Button 
                    variant="ghost" 
                    size="small"
                    onClick={() => handleEditForm(form.id)}
                  >
                    Edit Form
                  </Button>
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="forms-management__modal-overlay">
          <div className="forms-management__modal">
            <div className="forms-management__modal-header">
              <h3>Confirm Deletion</h3>
            </div>
            
            <div className="forms-management__modal-content">
              <p>
                Are you sure you want to delete this form? This action cannot be undone.
              </p>
              <p className="forms-management__modal-warning">
                <strong>Warning:</strong> If this form is published, students will no longer be able to access it.
              </p>
            </div>
            
            <div className="forms-management__modal-actions">
              <Button 
                variant="ghost" 
                onClick={() => setShowDeleteConfirm(null)}
              >
                Cancel
              </Button>
              <Button 
                variant="danger" 
                onClick={() => handleDeleteForm(showDeleteConfirm)}
              >
                Delete Form
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default FormsManagement;